/* eslint-disable eslint-comments/no-unlimited-disable */

/* eslint-disable */

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TaskIndexImport } from './routes/task/index'
import { Route as SignUpIndexImport } from './routes/sign-up/index'
import { Route as LoginIndexImport } from './routes/login/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIndexRoute = TaskIndexImport.update({
  id: '/task/',
  path: '/task/',
  getParentRoute: () => rootRoute,
} as any)

const SignUpIndexRoute = SignUpIndexImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/sign-up/': {
      id: '/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpIndexImport
      parentRoute: typeof rootRoute
    }
    '/task/': {
      id: '/task/'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof TaskIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/sign-up': typeof SignUpIndexRoute
  '/task': typeof TaskIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/sign-up': typeof SignUpIndexRoute
  '/task': typeof TaskIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login/': typeof LoginIndexRoute
  '/sign-up/': typeof SignUpIndexRoute
  '/task/': typeof TaskIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/sign-up' | '/task'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/sign-up' | '/task'
  id: '__root__' | '/' | '/login/' | '/sign-up/' | '/task/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  SignUpIndexRoute: typeof SignUpIndexRoute
  TaskIndexRoute: typeof TaskIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  SignUpIndexRoute: SignUpIndexRoute,
  TaskIndexRoute: TaskIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/",
        "/sign-up/",
        "/task/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/sign-up/": {
      "filePath": "sign-up/index.tsx"
    },
    "/task/": {
      "filePath": "task/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
