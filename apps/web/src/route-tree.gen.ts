/* eslint-disable eslint-comments/no-unlimited-disable */

/* eslint-disable */

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TaskIndexImport } from './routes/task/index'
import { Route as TaskIdIndexImport } from './routes/task/$id/index'
import { Route as TaskIdEditImport } from './routes/task/$id/edit'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIndexRoute = TaskIndexImport.update({
  id: '/task/',
  path: '/task/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdIndexRoute = TaskIdIndexImport.update({
  id: '/task/$id/',
  path: '/task/$id/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdEditRoute = TaskIdEditImport.update({
  id: '/task/$id/edit',
  path: '/task/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/task/': {
      id: '/task/'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof TaskIndexImport
      parentRoute: typeof rootRoute
    }
    '/task/$id/edit': {
      id: '/task/$id/edit'
      path: '/task/$id/edit'
      fullPath: '/task/$id/edit'
      preLoaderRoute: typeof TaskIdEditImport
      parentRoute: typeof rootRoute
    }
    '/task/$id/': {
      id: '/task/$id/'
      path: '/task/$id'
      fullPath: '/task/$id'
      preLoaderRoute: typeof TaskIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/task': typeof TaskIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
  '/task/$id': typeof TaskIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/task': typeof TaskIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
  '/task/$id': typeof TaskIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/task/': typeof TaskIndexRoute
  '/task/$id/edit': typeof TaskIdEditRoute
  '/task/$id/': typeof TaskIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/task' | '/task/$id/edit' | '/task/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/task' | '/task/$id/edit' | '/task/$id'
  id: '__root__' | '/' | '/task/' | '/task/$id/edit' | '/task/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TaskIndexRoute: typeof TaskIndexRoute
  TaskIdEditRoute: typeof TaskIdEditRoute
  TaskIdIndexRoute: typeof TaskIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TaskIndexRoute: TaskIndexRoute,
  TaskIdEditRoute: TaskIdEditRoute,
  TaskIdIndexRoute: TaskIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/task/",
        "/task/$id/edit",
        "/task/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/task/": {
      "filePath": "task/index.tsx"
    },
    "/task/$id/edit": {
      "filePath": "task/$id/edit.tsx"
    },
    "/task/$id/": {
      "filePath": "task/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
